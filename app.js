// Generated by CoffeeScript 1.7.1
(function() {
  var AUTH_COLLECTION, Command, DATA_COLLECTION, DOCROOT, Engine, S, SESSION_COLLECTION, Session, USER_COLLECTION, User, authenticate, cleanupSession, fetchCommandFromNumber, fs, getHandler, getParams, http, listCommands, log, loginAs, makeHTMLResponse, mineTypes, mongo, mongoClient, mongoUri, path, port, postCommand, querystring, registerToken, server, url, uuid, writeAsHtml;

  http = require('http');

  fs = require('fs');

  mongo = require('mongodb');

  log = console.log;

  url = require('url');

  S = require('string');

  querystring = require('querystring');

  uuid = require('node-uuid');

  path = require('path');

  mongoUri = process.env.MONGOHQ_URL || 'mongodb://localhost/comstock-www';

  mongoClient = mongo.MongoClient;

  DOCROOT = "documents";

  USER_COLLECTION = "user";

  AUTH_COLLECTION = "authinfo";

  DATA_COLLECTION = "commands";

  SESSION_COLLECTION = "session";

  mineTypes = {
    ".html": "text/html",
    ".css": "text/css",
    ".js": "application/javascript",
    ".png": "image/png",
    ".gif": "image/gif",
    ".ico": "image/x-icon",
    ".jpg": "image/jpeg"
  };

  getHandler = function(filepath, req, res) {
    return fs.exists(filepath, function(exists) {
      if (exists) {
        return fs.readFile(filepath, function(err, data) {
          var ext, header;
          if (err) {
            throw err;
          }
          ext = path.extname(filepath);
          header = {
            "Content-type": mineTypes[ext],
            "Content-length": data.length
          };
          res.writeHead(200, header);
          return res.end(data);
        });
      }
    });
  };

  postCommand = function(token, command, res) {
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, doc;
      if (err) {
        throw err;
      }
      collection = db.collection(SESSION_COLLECTION);
      return doc = collection.findOne({
        token: token
      }, function(err, item) {
        var cmd, dateobj, response, uid;
        if (err) {
          throw err;
        }
        if (item === null) {
          log("token not found, means, hasn't login");
          response = "Hasn't login yet";
          res.writeHead(404, {
            "Content-type": "text/html"
          });
          res.end(response);
          return db.close();
        } else {
          dateobj = new Date();
          if (item.expires < dateobj.getTime()) {
            log("session expires");
            response = "Session expires, please login again";
            res.writeHead(500, {
              "Content-type": "text/html"
            });
            res.end(response);
            return cleanupSession(db, collection, token);
          } else {
            log("session not expires");
            uid = item.uid;
            collection = db.collection(DATA_COLLECTION);
            cmd = new Command();
            cmd.uid = uid;
            cmd.date = "" + dateobj.getTime();
            cmd.data = {
              "command": command,
              "desc": ""
            };
            return collection.insert(cmd, function(err, docs) {
              if (err) {
                throw err;
              }
              log("Just inserted, " + docs.length);
              res.writeHead(200, {
                "Content-type": "text/html"
              });
              res.end();
              return db.close();
            });
          }
        }
      });
    });
  };

  makeHTMLResponse = function(msg, status) {
    var response;
    response = '<html><head><!-- Loading Bootstrap --><link href="css/bootstrap.min.css" rel="stylesheet"><!-- Loading Flat UI --><link href="css/flat-ui.css" rel="stylesheet"><link href="css/demo.css" rel="stylesheet"></head><body>';
    response += msg;
    return response += "</body></html>";
  };

  loginAs = function(user, password, res) {
    mongoClient.connect(mongoUri, function(err, db) {
      var collection, createdNewUser, docs, uid;
      if (err) {
        throw err;
      }
      collection = db.collection(USER_COLLECTION);
      createdNewUser = false;
      uid = 0;
      return docs = collection.findOne({
        mail: user.mail
      }, function(err, item) {
        var response;
        if (err) {
          throw err;
        }
        if (item === null) {
          response = "User Not Found";
          res.writeHead(404, {
            "Content-type": "text/html"
          });
          res.end(response);
          return db.close();
        } else {
          uid = item.uid;
          collection = db.collection(SESSION_COLLECTION);
          return collection.findOne({
            uid: uid
          }, function(err, item) {
            var dateobj;
            if (err) {
              throw err;
            }
            if (item === null) {
              return authenticate(uid, password, res);
            } else {
              dateobj = new Date();
              if (item.expires < dateobj.getTime()) {
                cleanupSession(db, collection, item.token);
                return authenticate(uid, password, res);
              } else {
                response = item.token;
                res.writeHead(409, {
                  "Content-type": "text/html"
                });
                res.end(response);
                return db.close();
              }
            }
          });
        }
      });
    });
  };

  authenticate = function(uid, password, res) {
    log("Authentication process got uid=" + uid);
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, docs;
      if (err) {
        throw err;
      }
      collection = db.collection(AUTH_COLLECTION);
      return docs = collection.findOne({
        uid: uid
      }, function(err, item) {
        var accessToken, response;
        if (item !== null) {
          if (password === item.password) {
            accessToken = uuid.v1();
            registerToken(db, uid, accessToken);
            response = accessToken;
            res.writeHead(200, {
              "Content-type": "text/html"
            });
            res.end(response);
            log("authenticate success!");
            return db.close();
          } else {
            response = makeHTMLResponse("Login Denied");
            res.writeHead(403, {
              "Content-type": "text/html"
            });
            res.end(response);
            log("authentication denied for wrong password");
            return db.close();
          }
        } else {
          response = makeHTMLResponse("Not found");
          res.writeHead(404, {
            "Content-type": "text/html"
          });
          res.end(response);
          log("Authentication defnied because user uid not found");
          return db.close();
        }
      });
    });
  };

  registerToken = function(db, uid, token) {
    var collection, ses;
    collection = db.collection(SESSION_COLLECTION);
    ses = new Session(token, uid);
    return collection.insert(ses, function(err, docs) {
      if (err) {
        throw err;
      }
    });
  };

  writeAsHtml = function(doc) {
    var output;
    output = "";
    output += "<div class='commandContain'>";
    output += '<pre class="prettyprint">' + doc.data.command + "</pre>";
    output += "<span class='desc'>" + doc.data.desc + "</span>";
    output += "<span class='user'> by " + doc.data.user + "</span>";
    output += "</div>";
    return output;
  };

  listCommands = function(token, res) {
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, doc;
      if (err) {
        throw err;
      }
      collection = db.collection(SESSION_COLLECTION);
      doc = collection.findOne({
        token: token
      }, function(err, item) {
        var dateobj, docs, response, responseObjs;
        if (err) {
          throw err;
        }
        if (item === null) {
          response = "Hasn't login yet";
          res.writeHead(403, {
            "Content-type": "text/html"
          });
          res.end(response);
          db.close();
        } else {
          dateobj = new Date();
          if (item.expires < dateobj.getTime()) {
            log("session expires");
            response = "Session expires, please login again";
            res.writeHead(500, {
              "Content-type": "text/html"
            });
            res.end(response);
            cleanupSession(db, collection, token);
            return;
          } else {
            collection = db.collection(DATA_COLLECTION);
            docs = collection.find({
              uid: item.uid
            }, {
              limit: 100
            });
            response = "";
            responseObjs = [];
            docs.each(function(err, doc) {
              var docObj;
              if (err) {
                throw err;
              }
              if (doc === null) {
                res.writeHead(200, {
                  "Content-type": "text/html"
                });
                response = JSON.stringify(responseObjs);
                log(response);
                res.end(response);
                db.close();
                return;
              }
              docObj = {
                Cmd: doc.data.command,
                Timestamp: doc.date
              };
              return responseObjs.push(docObj);
            });
          }
        }
      });
    });
  };

  fetchCommandFromNumber = function(token, num, res) {
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, doc;
      if (err) {
        throw err;
      }
      collection = db.collection(SESSION_COLLECTION);
      return doc = collection.findOne({
        token: token
      }, function(err, item) {
        var dateobj, docObj, docs, idx, response, responseObjs;
        if (err) {
          throw err;
        }
        if (item === null) {
          log("session not found");
          response = "Hasn't login yet";
          res.writeHead(403, {
            "Content-type": "text/html"
          });
          return res.end(response);
        } else {
          dateobj = new Date();
          if (item.expires < dateobj.getTime()) {
            response = "Session expires, please login again";
            res.writeHead(500, {
              "Content-type": "text/html"
            });
            res.end(response);
            cleanupSession(db, collection, token);
          } else {
            collection = db.collection(DATA_COLLECTION);
            docs = collection.find({
              uid: item.uid
            }, {
              limit: 100
            });
            response = "";
            responseObjs = [];
            idx = 0;
            docObj = null;
            return docs.each(function(err, doc) {
              if (err) {
                throw err;
              }
              if (doc === null) {
                res.writeHead(404, {
                  "Content-type": "text/html"
                });
                res.end("Not found");
                return;
              }
              idx++;
              if (idx === num) {
                docObj = {
                  Cmd: doc.data.command,
                  Timestamp: doc.date
                };
                res.writeHead(200, {
                  "Content-type": "text/html"
                });
                responseObjs.push(docObj);
                response = JSON.stringify(responseObjs);
                return res.end(response);
              }
            });
          }
        }
      });
    });
  };

  cleanupSession = function(db, collection, token) {
    return collection.remove({
      token: token
    }, function(err, item) {
      if (err) {
        throw err;
      }
      return db.close();
    });
  };

  getParams = function(req) {
    var query;
    query = url.parse(req.url).query;
    return querystring.parse(query);
  };

  server = http.createServer(function(req, res) {
    var basename, dirname, engine, number, params, pathname, user;
    basename = path.basename(req.url) || 'index.html';
    log(req.url);
    dirname = path.dirname(req.url);
    if (dirname === "/") {
      dirname = "";
    }
    log(basename);
    params = getParams(req);
    engine = new Engine();
    if (basename.indexOf("postCommand") === 0) {
      return postCommand(params.authinfo, params.cmd, res);
    } else if (basename.indexOf("list") === 0) {
      return listCommands(params.authinfo, res);
    } else if (basename.indexOf("registerUser") === 0) {
      user = new User(params.mail, "", "");
      return engine.registerUser(user, params.password, res);
    } else if (basename.indexOf("loginAs") === 0) {
      user = new User(params.mail, "", "");
      return loginAs(user, params.password, res);
    } else if (basename.indexOf("fetchCommandFromNumber") === 0) {
      number = parseInt(params.number);
      log("number=" + number);
      return fetchCommandFromNumber(params.authinfo, number, res);
    } else {
      pathname = dirname + "/" + basename;
      pathname = DOCROOT + pathname;
      log("pathname: " + pathname);
      getHandler(pathname, req, res);
    }
  });

  port = process.env.PORT || 5000;

  server.listen(port, function() {
    return log("http server listening on port " + server.address().port);
  });

  Engine = (function() {
    function Engine() {
      return;
    }

    Engine.prototype.registerUser = function(user, password, res) {
      return mongoClient.connect(mongoUri, function(err, db) {
        var collection, createdNewUser, docs, uid;
        if (err) {
          throw err;
        }
        collection = db.collection(USER_COLLECTION);
        createdNewUser = false;
        uid = 0;
        return docs = collection.findOne({
          mail: user.mail
        }, function(err, item) {
          var response;
          if (err) {
            throw err;
          }
          if (item === null) {
            return collection.find().count(function(err, count) {
              var date;
              if (err) {
                throw err;
              }
              date = new Date();
              user.uid = count + 1;
              user.created = date.getTime();
              user.lastLogin = date.getTime();
              return collection.insert(user, function(err, docs) {
                var oneData;
                if (err) {
                  throw err;
                }
                collection = db.collection(AUTH_COLLECTION);
                oneData = {
                  "uid": user.uid,
                  "date": "",
                  "password": password
                };
                return collection.insert(oneData, function(err, docs) {
                  var response;
                  if (err) {
                    throw err;
                  }
                  db.close();
                  response = makeHTMLResponse("User added, thank you for registering", 200);
                  res.writeHead(200, {
                    "Content-type": "text/html"
                  });
                  return res.end(JSON.stringify(response));
                });
              });
            });
          } else {
            log("User found, you cannot create duplicated user");
            db.close();
            response = {
              message: "It's already registered email. Please try another one, or if you don't know about it, please let us know"
            };
            res.writeHead(401, {
              "Content-type": "text/html"
            });
            return res.end(JSON.stringify(response));
          }
        });
      });
    };

    Engine.prototype.deleteUser = function(user, res) {
      return mongoClient.connect(mongoUri, function(err, db) {
        var collection, doc;
        if (err) {
          throw err;
        }
        collection = db.collection(USER_COLLECTION);
        return doc = collection.findOne({
          mail: user.mail
        }, function(err, item) {
          var response, uid;
          if (err) {
            throw err;
          }
          if (item === null) {
            db.close();
            response = "User not found";
            res.writeHead(404, {
              "Content-type": "text/html"
            });
            return res.end(response);
          } else {
            uid = parseInt(item.uid);
            collection = db.collection(DATA_COLLECTION);
            return collection.remove({
              uid: uid
            }, function(err, num) {
              if (err) {
                throw err;
              }
              db.close();
              response = "delete done";
              res.writeHead(200, {
                "Content-type": "text/html"
              });
              return res.end(response);
            });
          }
        });
      });
    };

    return Engine;

  })();

  Command = (function() {
    function Command() {}

    Command.prototype["uid"] = "";

    Command.prototype["date"] = "";

    Command.prototype["data"] = {
      "command": "",
      "desc": ""
    };

    return Command;

  })();

  Session = (function() {
    Session.prototype["token"] = "";

    Session.prototype["uid"] = 0;

    Session.prototype["expires"] = 0;

    function Session(token, uid) {
      var date, exp;
      this.token = token;
      this.uid = uid;
      date = new Date();
      exp = date.getTime() + 10800000;
      this.expires = exp;
      return;
    }

    return Session;

  })();

  User = (function() {
    User.prototype["mail"] = "";

    User.prototype["username"] = "";

    User.prototype["uid"] = "";

    User.prototype["created"] = "";

    User.prototype["lastLogin"] = "";

    function User(mail, username, uid) {
      this.mail = mail;
      this.username = username;
      this.uid = uid;
    }

    return User;

  })();

}).call(this);
