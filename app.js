// Generated by CoffeeScript 1.7.1
(function() {
  var COLLECTION_NAME, DOCROOT, S, fs, getCommand, getHandler, http, log, mongo, mongoClient, mongoUri, port, postCommand, querystring, server, socketio, url, uuid, writeAsHtml;

  http = require('http');

  fs = require('fs');

  mongo = require('mongodb');

  log = console.log;

  url = require('url');

  S = require('string');

  querystring = require('querystring');

  uuid = require('node-uuid');

  socketio = require('socket.io');

  mongoUri = process.env.MONGOHQ_URL || 'mongodb://localhost/mydb';

  mongoClient = mongo.MongoClient;

  DOCROOT = "documents";

  COLLECTION_NAME = "test";

  getHandler = function(filepath, req, res) {
    return fs.readFile(filepath, "utf-8", function(err, data) {
      var header;
      if (err) {
        throw err;
      }
      header = {
        "Content-type": ""
      };
      if (S(filepath).endsWith(".css")) {
        header["Content-type"] = "text/css";
      } else if (S(filepath).endsWith(".html")) {
        header["Content-type"] = "text/html";
      } else if (S(filepath).endsWith(".js")) {
        header["Content-type"] = "application/javascript";
      }
      res.writeHead(200, header);
      return res.end(data);
    });
  };

  postCommand = function(command, user, date, desc) {
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, id, oneData;
      if (err) {
        throw err;
      }
      collection = db.collection(COLLECTION_NAME);
      id = uuid.v1();
      oneData = {
        "id": id,
        "date": date,
        "data": {
          "command": command,
          "user": user,
          "desc": desc
        }
      };
      return collection.insert(oneData, function(err, docs) {
        if (err) {
          throw err;
        }
        log("Just inserted, " + docs.length);
        return collection.find({}).toArray(function(err, docs) {
          if (err) {
            throw err;
          }
          return docs.forEach(function(doc) {
            return log("found document:" + doc.data.command);
          });
        });
      });
    });
  };

  writeAsHtml = function(doc) {
    var output;
    log("Logging..");
    log(doc);
    output = "";
    output += "<div class='command'>";
    output += doc.data.command;
    output += "</div>";
    return output;
  };

  getCommand = function(res) {
    return mongoClient.connect(mongoUri, function(err, db) {
      var collection, docs, response;
      if (err) {
        throw err;
      }
      collection = db.collection(COLLECTION_NAME);
      response = '<html><head><!-- Loading Bootstrap --><link href="css/bootstrap.min.css" rel="stylesheet"><!-- Loading Flat UI --><link href="css/flat-ui.css" rel="stylesheet"><link href="css/demo.css" rel="stylesheet"></head><body>';
      docs = collection.find({}, {
        limit: 5
      });
      docs.each(function(err, doc) {
        if (err) {
          throw err;
        }
        log('hi');
        if (doc === null) {
          res.writeHead(200, {
            "Content-type": "text/html"
          });
          response += "</body></html>";
          log(response);
          res.end(response);
          return;
        }
        return response += writeAsHtml(doc);
      });
    });
  };

  server = http.createServer(function(req, res) {
    var filepath, isIgnore, params, pathname, query;
    filepath = '';
    isIgnore = false;
    pathname = url.parse(req.url).pathname;
    log("pathname=" + pathname);
    if (pathname === '/') {
      filepath = DOCROOT + "/index.html";
      return getHandler(filepath, req, res);
    } else if (pathname === '/favicon.ico') {
      res.writeHead(404);
    } else if (pathname === "/postCommand") {
      query = url.parse(req.url).query;
      params = querystring.parse(query);
      postCommand(params.command, params.user, params.date, params.desc);
      filepath = DOCROOT + "/index.html";
      return getHandler(filepath, req, res);
    } else if (pathname === "/getCommand") {
      return getCommand(res);
    } else if (pathname === "/search") {
      return res.writeHead(200, {
        "Content-type": "plain/text"
      });
    } else {
      filepath = DOCROOT + req.url;
      getHandler(filepath, req, res);
    }
  });

  port = process.env.PORT || 5000;

  server.listen(port, function() {
    return log("http server listening on port " + server.address().port);
  });


  /*
  io.configure ->
      io.set("transports", ["xhr-polling"]);
      io.set("polling duration", 10);
  
  
  io.sockets.on('connection', (socket) ->
      socket.on('fetchCommands', (data) ->
          commandData = getCommnad();
          io.sockets.emit('recvCommand', {data: commandData});
      )
  )
   */

}).call(this);
