// Generated by CoffeeScript 1.7.1
(function() {
  var DOCROOT, S, fs, getHandler, http, log, mongo, mongoClient, mongoUri, port, postHandler, querystring, server;

  http = require('http');

  fs = require('fs');

  mongo = require('mongodb');

  log = console.log;

  S = require('string');

  querystring = require('querystring');

  mongoUri = process.env.MONGOHQ_URL || 'mongodb://localhost/mydb';

  mongoClient = mongo.MongoClient;

  postHandler = function(req, res, postData) {
    console.log(querystring.parse(postData).text);
    return console.log(req);
  };

  getHandler = function(filepath, req, res) {
    return fs.readFile(filepath, "utf-8", function(err, data) {
      var header;
      if (err) {
        throw err;
      }
      header = {
        "Content-type": ""
      };
      if (S(filepath).endsWith(".css")) {
        header["Content-type"] = "text/css";
      } else if (S(filepath).endsWith(".html")) {
        header["Content-type"] = "text/html";
      } else if (S(filepath).endsWith(".js")) {
        header["Content-type"] = "application/javascript";
      }
      res.writeHead(200, header);
      return res.end(data);
    });
  };

  mongoClient.connect(mongoUri, function(err, db) {
    var collection;
    if (err) {
      throw error;
    }
    return collection = db.collection('test');
  });

  DOCROOT = "documents";

  server = http.createServer(function(req, res) {
    var filepath, isIgnore, postData;
    filepath = '';
    isIgnore = false;
    postData = '';
    if (req.url === '/') {
      filepath = DOCROOT + "/index.html";
    } else if (req.url === '/favicon.ico') {
      isIgnore = true;
    } else {
      filepath = DOCROOT + req.url;
    }
    console.log("Request: " + filepath);
    req.addEventListner('data', function(chunk) {
      return postData = chunk;
    });
    if (isIgnore === true) {
      res.writeHead(404);
      return;
    }
    if (req.method === "GET") {
      return getHandler(filepath, req, res);
    } else if (req.method === "POST") {
      return postHandler(req, res, postData);
    }
  });

  port = process.env.PORT || 5000;

  server.listen(port, function() {
    return console.log("http server listening on port " + server.address().port);
  });

}).call(this);
